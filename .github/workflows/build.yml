name: build

on: [push, workflow_dispatch]

env:
  namespace: divine-shops
  image_url: ghcr.io/divineempire/fixgame-shop-front
  api_url: https://api.fixgame.ru/api

  app_name: fixgame-shop-frontend
  host: fixgame.ru

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.short_sha.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v2

      - name: Get short SHA
        id: short_sha
        run: echo "::set-output name=short_sha::$(git rev-parse --short HEAD)"

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            VUE_APP_BASE_URL=${{ env.base_url }}
            VUE_APP_API_URL=${{ env.api_url }}
            VUE_APP_CASE_URL=${{ env.case_url }}
          push: true
          tags: |
            ${{ env.image_url }}:${{ steps.short_sha.outputs.short_sha }}
            ${{ env.image_url }}:latest


  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Get helm charts
        uses: actions/checkout@v2
        with:
          repository: divineempire/helm-charts
          path: "helm-charts"
          token: ${{ secrets.PAT_TOKEN }}

      - name: Install helm
        uses: azure/setup-helm@v1
        with:
          id: install

      - name: Add Kube Config
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          mkdir ~/.kube
          echo "${KUBE_CONFIG}" | base64 --decode > ~/.kube/config
      
      - name: Grant access to registry for Kubernetes
        run: >
          kubectl create secret docker-registry github-registry
          -n ${{ env.namespace }}
          --docker-server=ghcr.io 
          --docker-username=${{ github.repository_owner }}
          --docker-password=${{ secrets.PAT_TOKEN }}
          --dry-run=client
          --output=yaml
          | kubectl apply -f -
          
      - name: Deploy to Kubernetes
        run: >
          helm upgrade ${{ env.app_name }}
          helm-charts/frontend
          --set=image.repository=${{ env.image_url }}
          --set=image.tag=${{ needs.build.outputs.short_sha }}
          --namespace=${{ env.namespace }}
          --install
          --wait
          --values=- <<EOF
            imagePullSecrets: [ name: github-registry ]
            ingress:
              enabled: true
              host: ${{ env.host }}
          EOF
